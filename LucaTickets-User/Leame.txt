Basado en
https://examples.javacodegeeks.com/enterprise-java/spring/boot/spring-boot-rest-api-tutorial/#example
https://mkyong.com/spring-boot/spring-rest-error-handling-example/
https://www.baeldung.com/global-error-handler-in-a-spring-rest-api

======
//Spring13b-RestStudent-Error
En esta version se trabajara el tema de errores.
Se ha modificado el controller y el modelo de datos
Cuando no se pueda validar con respecto a la entidad, en el cuerpo de mensaje de vuelta parecen informaciones de los sucesos ocurridos
Se ha modificado el POST del controller en este ejemplo

======
//Spring13c-RestStudent-ErrorAdvice
Se agrupan elementos con el Advice
se simplifican las clases personalizadas


¿Como funciona de forma inicial?
Si se lanza 
  return repository.findById(id)
                .orElseThrow(() -> new StudentNotFoundException(id));
El JSON original será
{
    "timestamp":"2019-02-27T04:03:52.398+0000",
    "status":500,
    "error":"Internal Server Error",
    "message":"Student id not found : 5",
    "path":"/strudent/5"
}
Al indicarle el NOTFOUND logramos un 404

Se han personalizado los mensajes automatizados (en un 404, por ejemplo) y los mensajes propios (Ej falla al @valid)

tambien se ha hecho un handler para tratar cualquier tipo de error

/// PRUEBAS QUE SE VAN A REALIZAR

(GET)  localhost:8082/students/  				>>> OK
(POST) localhost:8082/students/120    			>>> ERROR 405 (a medida)
(POST) localhost:8082/students        			>>> ERROR 400 (con añadidos)
{
    "firstName": "",
    "lastName": "",
    "year": ""
}
(GET)  localhost:8082/students/throwException	>>> ERROR 500 (con añadidos)
(PUT)  localhost:8082/students					>>> ERROR 404 (con añadidos)
{
    "id": 109,
    "firstName": "a",
    "lastName": "a",
    "year": ""
}



==========
ACTUATOR
==========
Se incluye Spring Actuators  (mirar pom.xml)
Si te fijas da poca informacion el /health por ser REST
Ahora miralo en un MVC (Ej 6)
/health
/info
/metrics

Actuators (info)
   https://www.baeldung.com/spring-boot-actuators
   https://medium.com/@lfernapalacio/qu%C3%A9-son-los-actuators-de-spring-boot-55cecb48f746

Ejemplo
localhost:8080/actuator/health
{"status":"UP"}  <--- TOdo OK

========
POSTMAN
========
Se empleará para realizar pruebas
Seguir instrucciones de 
https://examples.javacodegeeks.com/enterprise-java/spring/boot/spring-boot-rest-api-tutorial/#test

DOwnload Postman
https://www.getpostman.com/apps
Register and open the aplication

Start Postman and close the “Create New” dialog box. 
The top portion of the window is where you select the HTTP method and enter the request URL. 
The bottom portion of the window is where the response will be displayed.

Postman is a Chrome add-on and Mac application which is used to fire requests to an API. 
It is very lightweight and fast. Requests can be organized in groups, 
also tests can be created with verifications for certain conditions on the response. 
With its features, it is very good and convenient API tool. 
It is possible to make different kinds of HTTP requests – GET, POST, PUT, PATCH and DELETE. 
It is possible to add headers to the requests


=======
SWAGGER
=======

Es una especificación. Actualmente está en la versión 3.
Hasta la version 2 sse llamaba Swagger y desde la v3 es OPenAPI
Te permite documentar la API rest para que la usen.
https://www.ionos.es/digitalguide/paginas-web/desarrollo-web/que-es-openapi/

Como es una expecificación, necesitabamos implementarla.

De forma clásica se usaba SpringFox Swagger
   https://www.baeldung.com/swagger-2-documentation-for-spring-rest-api
   https://dzone.com/articles/spring-boot-restful-api-documentation-with-swagger
Pero a partir de Spring BBoot 2.6.x no es compatoble y no actulizan SpringFox desde 2020

¿Solución? ---> Empleamos SpringDoc

Paso 01) Incluir depedencia
Paso 02) Incluir un bean con info general en la configuracion
Paso 03) Documentaar cada servicio REST

La info se muestra desde
http://localhost:8080/v3/api-docs
http://localhost:8080/swagger-ui/index.html


https://www.baeldung.com/spring-rest-openapi-documentation
https://wstutorial.com/rest/rest-api-documentation-springdoc.html
https://www.dariawan.com/tutorials/spring/documenting-spring-boot-rest-api-springdoc-openapi-3/
https://codingnconcepts.com/spring-boot/configure-springdoc-openapi/

Para migrar desde SpringFox
https://springdoc.org/migrating-from-springfox.html




